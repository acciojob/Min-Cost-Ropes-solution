/// <reference types="cypress" />

describe("Binary Search-solution", () => {
  it("Testcase 1", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [1, 1, 1, 1],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 8);
    });
  });

  it("Testcase 2", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [7, 3, 5, 9, 4],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 63);
    });
  });
  it("Testcase 3", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [7, 8],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 15);
    });
  });
  it("Testcase 4", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [
        989, 748, 538, 967, 695, 301, 263, 453, 666, 293, 710, 32, 371, 184, 86,
        281, 888, 842, 241, 145, 360, 18, 568, 165, 199, 929, 523, 623, 685,
        975, 896, 660, 645, 90, 339, 572, 807, 284, 578, 54, 511, 376, 122, 200,
        95, 817, 359, 282, 113, 6, 95, 274, 55, 347, 549, 840, 626, 570, 288,
        620, 638, 989, 51, 11, 905, 838, 865, 930, 236, 542, 851, 365, 533, 388,
        523, 851, 142, 402, 496, 886, 188, 992, 488, 725, 979, 618, 145, 947,
        593, 200, 318, 338, 812, 493, 543, 206, 313, 850, 41, 883, 284, 209,
        107, 842, 927, 241, 479, 393, 742, 165, 778, 781, 61, 842, 961, 741,
        208, 1, 900, 955, 534, 651, 690, 173, 506, 901, 912, 228, 524, 482, 15,
        186, 719, 959, 580, 859, 575, 456, 282, 584, 776, 802, 754, 490, 577,
        801, 628, 954, 605, 436, 889, 689, 682, 570, 671, 669, 560, 541, 941,
        790, 539, 842, 581, 674, 430, 792, 900, 665, 565, 492, 321, 150, 820,
        585, 610, 554, 169, 95, 983, 49, 517, 595, 771, 569, 246, 782, 641, 873,
        96, 18, 572, 910, 355, 598, 423, 847, 785, 302, 57, 651, 182, 312, 423,
        776, 411, 664, 942, 423, 276, 509, 983, 818, 882, 832, 310, 42, 785,
        889, 634, 454, 78, 72, 399, 527, 219, 820, 246, 334, 199, 927, 891, 305,
        197, 172, 227, 362, 854, 660, 947, 15, 440, 23, 2, 828, 902, 408, 843,
        614, 9, 66, 600, 966, 865, 381, 490, 911, 955, 305, 957, 851, 575, 939,
        812, 951, 846, 392, 516, 119, 694, 502, 811, 700, 246, 896, 725, 229,
        623, 502, 81, 159, 163, 927, 843, 506, 578, 550, 251, 474, 392, 875,
        416, 871, 888, 542, 762, 105, 715, 138, 716, 962, 237, 471, 664, 896,
        378, 831, 236, 703, 747, 537, 420, 808, 291, 39, 824, 143, 629, 241,
        385, 489, 56, 507, 626, 455, 819, 135, 525, 497, 972, 505, 887, 372,
        133, 57, 725, 211, 704, 157, 737, 601, 726, 718, 278, 507, 911, 17, 613,
        19, 764, 390, 194, 229, 141, 748, 939, 109, 188, 435, 28, 298, 361, 846,
        961, 927, 557, 728, 788, 78, 919, 613, 558, 969, 31, 61, 840, 320, 282,
        127, 841, 210, 454, 529, 826, 917, 819, 402, 63, 126, 307, 611, 373,
        145, 920, 943, 176, 661, 389, 707, 179, 912, 832, 94, 508, 586, 525,
        207, 360, 502, 131, 165, 374, 869, 550, 77, 412, 483, 572, 951, 324,
        332, 452, 852, 840, 593, 86, 390, 355, 28, 288, 725, 276, 798, 42, 65,
        819, 132, 663, 303, 794, 428, 17, 379, 233, 955, 3, 547, 369, 985, 839,
        988, 47, 111, 839, 10, 748, 85, 546, 756, 156, 970, 925, 992, 216, 681,
        223, 833, 968, 829, 380, 255, 630, 473, 666, 416, 322, 991, 336, 585,
        632, 23, 350, 820, 819, 254, 790, 319, 377, 855, 395, 470, 298, 95, 504,
        390, 990, 317, 535, 643, 793, 557, 382, 454, 511, 373, 411, 422, 922,
        711, 61, 733, 859, 31, 342, 601, 178, 666, 2, 380, 300, 726, 360, 41,
        272, 215, 840, 60, 824, 809, 316, 971, 941, 528, 765, 690, 274, 719,
        447, 188, 795, 636, 266, 911, 244, 250, 609, 496, 293, 97, 579, 496,
        944, 363, 511, 801, 840, 776, 883, 860, 65, 293, 257, 127, 455, 274,
        751, 735, 555, 366, 736, 513, 598, 443, 564, 953, 40, 476, 425, 463,
        663, 467, 522, 1, 140, 556, 100, 508, 112, 210, 237, 499, 445, 121, 403,
        522, 681, 941, 334, 153, 793, 946, 568, 629, 179, 308, 705, 452, 451,
        272, 437, 362, 466, 801, 364, 317, 832, 376, 615, 477, 251, 806, 363,
        394, 492, 177, 811, 450, 378, 744, 595, 434, 295, 644, 82, 166, 807,
        863, 864, 62, 92, 141, 174, 756, 33, 558, 335, 427, 236, 60, 383, 398,
        1000, 253, 729, 540, 64, 813, 519, 247, 646, 435, 831, 121, 293, 773,
        921,
      ],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 3083881);
    });
  });
  it("Testcase 5", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [
        53, 42, 27, 44, 98, 28, 82, 59, 70, 63, 23, 84, 38, 1, 51, 93, 31, 38,
        68, 19, 61, 96, 21, 87, 67, 14, 65, 10, 87, 25, 49, 53, 74, 55, 90, 36,
        31, 61, 1, 8, 77, 23, 4, 37, 91, 68, 44, 86, 60, 46, 30, 50, 87, 54, 34,
        20, 66, 25, 5, 12, 80, 8, 46, 32, 12, 84, 90, 9, 75, 32, 14, 36, 12, 99,
        77, 1, 30, 1, 85, 32, 23, 59, 21, 23, 4, 67, 2, 79, 93, 63, 61, 99, 57,
        63, 71, 47, 41, 25, 51, 72, 81, 31, 54, 94, 97, 73, 58, 3, 96, 43, 13,
        18, 86, 79, 94, 85, 74, 12, 11, 31, 95, 43, 80, 65, 55, 58, 96, 82, 53,
        80, 55, 67, 18, 97, 18, 82, 8, 84, 91, 44, 30, 10, 89, 59, 36, 78, 49,
        36, 95, 73, 43, 4, 77, 61, 16, 16, 95, 42, 25, 49, 88, 56, 32, 1, 9, 87,
        27, 21, 76, 88, 95, 22, 84, 87, 72, 20, 19, 87, 18, 34, 54, 65, 87, 92,
        94, 93, 41, 38, 44, 78, 79, 64, 95, 3, 58, 75, 21, 12, 97, 32, 17, 66,
        78, 89, 97, 43, 17, 86, 95, 37, 19, 70, 15, 63, 98, 90, 62, 46, 66, 64,
        17, 96, 34, 25, 34, 43, 11, 46, 77, 21, 83, 94, 88, 98, 57, 78, 72, 3,
        84, 2, 33, 83, 12, 55, 7, 98, 10, 70, 99, 68, 54, 44, 16, 75, 62, 34,
        85, 73, 83, 26, 1, 10, 7, 91, 93, 87, 55, 8, 10, 77, 88, 54, 5, 40, 15,
        72, 74, 15, 93, 38, 78, 9, 46, 24, 68, 69, 77, 39, 46, 100, 33, 86, 5,
        63, 62, 85, 12, 10, 99, 70, 29, 23, 94, 73, 28, 63, 48, 65, 52, 63, 61,
        75, 68, 84, 72, 8, 26, 52, 63, 81, 23, 98, 88, 36, 74, 65, 21, 23, 68,
        2, 19, 27, 25, 82, 15, 63, 36, 31, 15, 29, 8, 47, 35, 43, 8, 98, 21, 39,
        24, 82, 4, 82, 50, 54, 89, 7, 70, 80, 84, 71, 86, 73, 18, 13, 20, 86,
        12, 22, 43, 82, 85, 79, 54, 16, 13, 67, 26, 8, 38, 26, 74, 100, 87, 12,
        99, 79, 71, 58, 12, 88, 64, 92, 95, 61, 16, 67, 94, 58, 28, 51, 62, 55,
        49, 72, 33, 55, 57, 55, 48, 17, 12, 63, 84, 55, 10, 21, 88, 23, 87, 24,
        69, 36, 4, 70, 13, 4, 79, 92, 51, 62, 56, 53, 76, 74, 3, 97, 91, 79, 73,
        87, 77, 4, 48, 73, 11, 59, 52, 94, 1, 21, 7, 91, 94, 45, 55, 22, 9, 7,
        83, 70, 59, 2, 52, 3, 59, 66, 93, 43, 73, 83, 79, 58, 12, 46, 41, 59,
        84, 98, 89, 27, 13, 81, 24, 84, 68, 39, 33, 23, 21, 44, 75, 51, 13, 75,
        33, 95, 98, 19, 98, 44,
      ],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 228216);
    });
  });
  it("Testcase 6", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [
        10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        14, 15, 61, 71, 81, 91, 10, 12, 1212, 12, 12, 1212, 121, 21, 2, 9, 8, 7,
        6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3,
        4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7,
        6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3,
        4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7,
        6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3,
        4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 23, 23,
        123, 13, 12313, 5, 213, 75, 46, 342, 45, 121, 987, 545, 3423, 23445,
        565, 778, 88945, 454,
      ],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 255201);
    });
  });
  it("Testcase 7", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [
        23, 123, 11, 223, 3, 4, 5, 6, 7, 8, 9, 7, 6, 3, 1, 23, 234, 234, 44,
        322, 1231, 4, 4545, 566, 0, 99,
      ],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 17054);
    });
  });
  it("Testcase 8", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [
        10, 12, 1, 1, 1, 1, 12, 1222, 3, 4, 5, 6, 7, 8, 9, 10, 111, 2, 2, 1, 1,
        1, 1, 12, 1222, 3, 4, 5, 6, 7, 8, 9, 10, 111, 2, 34, 45, 3232, 22,
      ],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 12679);
    });
  });
  it("Testcase 9", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [
        10, 12, 1, 1, 1, 1, 12, 1222, 3, 4, 5, 6, 7, 8, 9, 10, 111, 2, 34, 45,
        3232, 22,
      ],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 7274);
    });
  });
  it("Testcase 10", () => {
    cy.request("POST", "http://localhost:3000/mincost", {
      arr: [7, 3, 5, 9, 4, 7, 3, 5, 9, 4, 7, 3, 5, 9, 4],
    }).then((response) => {
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property("message", 322);
    });
  });
});
